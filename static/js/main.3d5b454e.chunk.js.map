{"version":3,"sources":["components/Form.js","components/WeatherCardComponents/Location.js","components/WeatherCardComponents/Icon.js","components/WeatherCardComponents/RealTimeAndRealFeelTemp.js","components/WeatherCardComponents/WindAndHumidityNow.js","components/WeatherCardComponents/Pressure.js","components/TodayWeatherCard.js","components/WeatherCardComponents/DayInfo.js","components/WeatherCardComponents/MaxMinTemp.js","components/WeatherCardComponents/RainfallChance.js","components/WeatherCardComponents/WindAndHumidity.js","components/ForecastWeatherCard.js","components/Error.js","App.js","serviceWorker.js","index.js"],"names":["Form","weatherData","setWeatherData","useState","loading","setLoading","query","setQuery","cityName","useRef","useEffect","fetch","then","response","json","result","className","onSubmit","e","preventDefault","current","replace","Input","ref","size","action","color","content","onChange","target","value","placeholder","console","log","location","name","Location","country","Image","src","icon","alt","text","RealTimeAndRealFeelTemp","temp_c","feelslike_c","WindAndHumidity","wind_kph","humidity","Pressure","pressure_mb","WeatherCard","Icon","condition","WindAndHumidityNow","DayInfo","day","Date","getDay","MaxMinTemp","mintemp_c","maxtemp_c","RainAndHumidity","daily_chance_of_rain","daily_chance_of_snow","maxwind_kph","avghumidity","ForecastWeatherCard","date","RainfallChance","message","App","TodayWeatherCard","forecast","forecastday","map","el","key","date_epoch","error","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.3d5b454e.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Input } from \"semantic-ui-react\";\r\nimport \"./styles/form.css\";\r\n\r\nfunction Form({ weatherData, setWeatherData }) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [query, setQuery] = useState(false);\r\n\r\n  const cityName = useRef(\"\");\r\n\r\n  useEffect(() => {\r\n    if (query) {\r\n      setLoading(true);\r\n      fetch(query)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n          setWeatherData(result);\r\n        });\r\n      setLoading(false);\r\n    }\r\n  }, [query]);\r\n\r\n  const handleInputChange = (e) => {\r\n    cityName.current = e.target.value;\r\n  };\r\n\r\n  const formSubmit = (e) => {\r\n    e.preventDefault();\r\n    function conventer(name) {\r\n      return name\r\n        .replace(/ą/g, \"a\")\r\n        .replace(/Ą/g, \"A\")\r\n        .replace(/ć/g, \"c\")\r\n        .replace(/Ć/g, \"C\")\r\n        .replace(/ę/g, \"e\")\r\n        .replace(/Ę/g, \"E\")\r\n        .replace(/ł/g, \"l\")\r\n        .replace(/Ł/g, \"L\")\r\n        .replace(/ń/g, \"n\")\r\n        .replace(/Ń/g, \"N\")\r\n        .replace(/ó/g, \"o\")\r\n        .replace(/Ó/g, \"O\")\r\n        .replace(/ś/g, \"s\")\r\n        .replace(/Ś/g, \"S\")\r\n        .replace(/ż/g, \"z\")\r\n        .replace(/Ż/g, \"Z\")\r\n        .replace(/ź/g, \"z\")\r\n        .replace(/Ź/g, \"Z\");\r\n    }\r\n    if (typeof cityName.current == \"string\") {\r\n      setQuery(\r\n        `https://api.weatherapi.com/v1/forecast.json?key=a6426e75f22c4707927135113201309&q=${conventer(\r\n          cityName.current\r\n        )}&lang=pl&days=10`\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"form\">\r\n      <form onSubmit={formSubmit}>\r\n        <Input\r\n          ref={cityName}\r\n          size=\"large\"\r\n          action={{\r\n            color: \"yellow\",\r\n            content: \"Sprawdź\",\r\n            loading: loading ? true : false,\r\n          }}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Wpisz miasto\"\r\n        />\r\n        {weatherData ? \"\" : console.log(weatherData.location.name)}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Location = ({ weatherData }) => {\r\n  return <p>{`${weatherData.name}, ${weatherData.country}`}</p>;\r\n};\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\n\r\nconst Image = ({ weatherData }) => {\r\n  return (\r\n    <>\r\n      <p className=\"icon\">\r\n        <img src={weatherData.icon} alt={weatherData.text} />\r\n      </p>\r\n      <p>{weatherData.text}</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Image;\r\n","import React from \"react\";\r\n\r\nconst RealTimeAndRealFeelTemp = ({ weatherData }) => {\r\n  return (\r\n    <>\r\n      <p className=\"temp\">{weatherData.temp_c}°C</p>\r\n      <p className=\"realFeel\">Odczuwalnie {weatherData.feelslike_c}°C</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RealTimeAndRealFeelTemp;\r\n","import React from \"react\";\r\n\r\nconst WindAndHumidity = ({ weatherData }) => {\r\n  return (\r\n    <>\r\n      <p>Wiatr {weatherData.wind_kph} km/h</p>\r\n      <p>Wilgotność {weatherData.humidity}%</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WindAndHumidity;\r\n","import React from \"react\";\r\n\r\nconst Pressure = ({ weatherData }) => {\r\n  return <p>{weatherData.pressure_mb}hPa</p>;\r\n};\r\n\r\nexport default Pressure;\r\n","import React from \"react\";\r\nimport \"./styles/WeatherCard.css\";\r\n\r\n//components\r\nimport Location from \"./WeatherCardComponents/Location\";\r\nimport Icon from \"./WeatherCardComponents/Icon\";\r\nimport RealTimeAndRealFeelTemp from \"./WeatherCardComponents/RealTimeAndRealFeelTemp\";\r\nimport WindAndHumidityNow from \"./WeatherCardComponents/WindAndHumidityNow\";\r\nimport Pressure from \"./WeatherCardComponents/Pressure\";\r\n\r\nfunction WeatherCard({ weatherData }) {\r\n  return (\r\n    <div className=\"card\">\r\n      <Location weatherData={weatherData.location} />\r\n      <Icon weatherData={weatherData.current.condition} />\r\n      <RealTimeAndRealFeelTemp weatherData={weatherData.current} />\r\n      <WindAndHumidityNow weatherData={weatherData.current} />\r\n      <Pressure weatherData={weatherData.current} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React from \"react\";\r\n\r\nconst DayInfo = ({ weatherData }) => {\r\n  const getDay = () => {\r\n    const days = [\r\n      \"Poniedziałek\",\r\n      \"Wtorek\",\r\n      \"Środa\",\r\n      \"Czwartek\",\r\n      \"Piątek\",\r\n      \"Sobota\",\r\n      \"Niedziela\",\r\n    ];\r\n    let date = weatherData;\r\n    let day = new Date(date).getDay();\r\n    day = days[day];\r\n    return day;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <p>{getDay()}</p>\r\n      <p>{weatherData}</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DayInfo;\r\n","import React from \"react\";\r\n\r\nconst MaxMinTemp = ({ weatherData }) => {\r\n  return (\r\n    <>\r\n      <p>\r\n        {weatherData.mintemp_c}°C - {weatherData.maxtemp_c}°C\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MaxMinTemp;\r\n","import React from \"react\";\r\n\r\nconst RainAndHumidity = ({ weatherData }) => {\r\n  return (\r\n    <>\r\n      <p>\r\n        Szansa na opady{\" \"}\r\n        {weatherData.daily_chance_of_rain > 0\r\n          ? weatherData.daily_chance_of_rain\r\n          : weatherData.daily_chance_of_snow > 0\r\n          ? weatherData.daily_chance_of_snow\r\n          : \"0\"}\r\n        %\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RainAndHumidity;\r\n","import React from \"react\";\r\n\r\nconst WindAndHumidity = ({ weatherData }) => {\r\n  return (\r\n    <>\r\n      <p>Wiatr {weatherData.maxwind_kph} km/h</p>\r\n      <p>Wilgotność {weatherData.avghumidity}%</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WindAndHumidity;\r\n","import React from \"react\";\r\n\r\n//Components\r\nimport DayInfo from \"./WeatherCardComponents/DayInfo\";\r\nimport Image from \"./WeatherCardComponents/Icon\";\r\nimport MaxMinTemp from \"./WeatherCardComponents/MaxMinTemp\";\r\nimport RainfallChance from \"./WeatherCardComponents/RainfallChance\";\r\nimport WindAndHumidity from \"./WeatherCardComponents/WindAndHumidity\";\r\n\r\nconst ForecastWeatherCard = ({ weatherData }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <DayInfo weatherData={weatherData.date} />\r\n      <Image weatherData={weatherData.day.condition} />\r\n      <MaxMinTemp weatherData={weatherData.day} />\r\n      <RainfallChance weatherData={weatherData.day} />\r\n      <WindAndHumidity weatherData={weatherData.day} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForecastWeatherCard;\r\n","import React from \"react\";\r\nimport \"./styles/Error.css\";\r\n\r\nfunction Form({ weatherData }) {\r\n  return (\r\n    <div className=\"error\">\r\n      <p>{weatherData.message}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\n//Components\nimport Form from \"./components/Form\";\nimport TodayWeatherCard from \"./components/TodayWeatherCard\";\nimport ForecastWeatherCard from \"./components/ForecastWeatherCard\";\nimport Error from \"./components/Error\";\n\nfunction App() {\n  const [weatherData, setWeatherData] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <Form weatherData={weatherData} setWeatherData={setWeatherData} />\n      {weatherData.location && (\n        <div className=\"weatherSection\">\n          <div className=\"cards\">\n            <TodayWeatherCard weatherData={weatherData} />\n            <div className=\"forecastCards\">\n              {weatherData.forecast.forecastday.map((el) => {\n                return (\n                  <ForecastWeatherCard weatherData={el} key={el.date_epoch} />\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n      {weatherData.error && <Error weatherData={weatherData.error} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}